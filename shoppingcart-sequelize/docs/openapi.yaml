openapi: 3.1.0
info:
  title: Shopping Cart API (REST API Express.js)
  description: Documentation for Shopping Cart API.
  version: "1.0.0"

tags:
  - name: Address
    description: Operasi terkait dengan /address
  - name: Auth
    description: Operasi terkait dengan /auth
  - name: Cart
    description: Operasi terkait dengan /cart
  - name: Cart Item
    description: Operasi terkait dengan /cart-items
  - name: Product
    description: Operasi terkait dengan /products
paths:

#Auth
  /auth/register:
    post:
      summary: Mendaftarkan pengguna baru
      tags:
      - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - name
                - password
              properties:
                email:
                  type: string
                  example: user@example.com
                name:
                  type: string
                  example: John Doe
                password:
                  type: string
                  example: password123
      responses:
        200:
          description: Pengguna berhasil didaftarkan
        400:
          description: Bad Request
        500:
          description: Kesalahan server

  /auth/login:
    post:
      summary: Login pengguna
      tags:
      - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
      responses:
        200:
          description: Login berhasil, token JWT dikirim
        400:
          description: Bad Request
        401:
          description: Unauthorized
        404:
          description: Pengguna tidak ditemukan
        500:
          description: Kesalahan server

  /auth/profile:
    get:
      summary: Mendapatkan profil pengguna
      tags:
      - Auth
      security:
        - bearerAuth: []
      responses:
        200:
          description: Profil pengguna berhasil didapatkan
        401:
          description: Token tidak valid atau tidak ada
        500:
          description: Kesalahan server

#Address
  /address:
    get:
      summary: Mendapatkan semua alamat
      tags:
      - Address
      description: Endpoint untuk mendapatkan semua alamat dari database.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Daftar alamat berhasil ditemukan
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    AddressID:
                      type: integer
                    CartID:
                      type: integer
                    AddressLine1:
                      type: string
                    AddressLine2:
                      type: string
                    City:
                      type: string
                    State:
                      type: string
                    ZipCode:
                      type: string
        '500':
          description: Kesalahan server

    post:
      summary: Menambahkan alamat baru
      tags:
      - Address
      description: Endpoint untuk menambahkan alamat baru ke dalam sistem.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - CartID
                - AddressLine1
                - AddressLine2
                - City
                - State
                - ZipCode
              properties:
                CartID:
                  type: integer
                AddressLine1:
                  type: string
                AddressLine2:
                  type: string
                City:
                  type: string
                State:
                  type: string
                ZipCode:
                  type: string
      responses:
        '201':
          description: Alamat berhasil ditambahkan
        '500':
          description: Kesalahan server

  /address/{id}:
    get:
      summary: Mendapatkan alamat berdasarkan ID
      tags:
      - Address
      description: Endpoint untuk mendapatkan alamat berdasarkan ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID alamat yang akan dicari
      responses:
        '200':
          description: Alamat berhasil ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  AddressID:
                    type: integer
                  CartID:
                    type: integer
                  AddressLine1:
                    type: string
                  AddressLine2:
                    type: string
                  City:
                    type: string
                  State:
                    type: string
                  ZipCode:
                    type: string
        '404':
          description: Alamat tidak ditemukan
        '500':
          description: Kesalahan server

    put:
      summary: Mengupdate alamat berdasarkan ID
      tags:
      - Address
      description: Endpoint untuk memperbarui alamat berdasarkan ID yang diberikan.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID alamat yang akan diperbarui
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CartID:
                  type: integer
                AddressLine1:
                  type: string
                AddressLine2:
                  type: string
                City:
                  type: string
                State:
                  type: string
                ZipCode:
                  type: string
      responses:
        '200':
          description: Alamat berhasil diperbarui
        '404':
          description: Alamat tidak ditemukan
        '500':
          description: Kesalahan server

    delete:
      summary: Menghapus alamat berdasarkan ID
      tags:
      - Address
      description: Endpoint untuk menghapus alamat berdasarkan ID yang diberikan.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID alamat yang akan dihapus
      responses:
        '200':
          description: Alamat berhasil dihapus
        '404':
          description: Alamat tidak ditemukan
        '500':
          description: Kesalahan server

#Product
  /products:
    get:
      summary: Mendapatkan semua produk
      tags:
      - Product
      description: Endpoint untuk mendapatkan semua produk yang ada.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Daftar produk berhasil ditemukan
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ProductID:
                      type: integer
                    Name:
                      type: string
                    Description:
                      type: string
                    Price:
                      type: number
                      format: float
                    Stock:
                      type: integer
        '500':
          description: Kesalahan server

    post:
      summary: Menambahkan produk baru
      tags:
      - Product
      description: Endpoint untuk menambahkan produk baru ke dalam sistem.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Name
                - Description
                - Price
                - Stock
              properties:
                Name:
                  type: string
                Description:
                  type: string
                Price:
                  type: number
                  format: float
                Stock:
                  type: integer
      responses:
        '201':
          description: Produk berhasil ditambahkan
        '500':
          description: Kesalahan server

  /products/paging:
    get:
      summary: Mendapatkan produk dengan pagination
      tags:
      - Product
      description: Endpoint untuk mendapatkan produk dengan paginasi.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: Halaman produk yang akan ditampilkan
        - in: query
          name: size
          required: false
          schema:
            type: integer
            default: 10
          description: Jumlah produk per halaman
      responses:
        '200':
          description: Daftar produk dengan paginasi berhasil ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalItems:
                    type: integer
                  totalPages:
                    type: integer
                  currentPage:
                    type: integer
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        ProductID:
                          type: integer
                        Name:
                          type: string
                        Description:
                          type: string
                        Price:
                          type: number
                          format: float
                        Stock:
                          type: integer
        '500':
          description: Kesalahan server

  /products/{id}:
    get:
      summary: Mendapatkan produk berdasarkan ID
      tags:
      - Product
      description: Endpoint untuk mendapatkan produk berdasarkan ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID produk yang akan dicari
      responses:
        '200':
          description: Produk berhasil ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  ProductID:
                    type: integer
                  Name:
                    type: string
                  Description:
                    type: string
                  Price:
                    type: number
                    format: float
                  Stock:
                    type: integer
        '404':
          description: Produk tidak ditemukan
        '500':
          description: Kesalahan server

    put:
      summary: Mengupdate produk berdasarkan ID
      tags:
      - Product
      description: Endpoint untuk memperbarui produk berdasarkan ID yang diberikan.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID produk yang akan diperbarui
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                Description:
                  type: string
                Price:
                  type: number
                  format: float
                Stock:
                  type: integer
      responses:
        '200':
          description: Produk berhasil diperbarui
        '404':
          description: Produk tidak ditemukan
        '500':
          description: Kesalahan server

    delete:
      summary: Menghapus produk berdasarkan ID
      tags:
      - Product
      description: Endpoint untuk menghapus produk berdasarkan ID yang diberikan.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID produk yang akan dihapus
      responses:
        '200':
          description: Produk berhasil dihapus
        '404':
          description: Produk tidak ditemukan
        '500':
          description: Kesalahan server

  /products/filter/{price}/{minStock}:
    get:
      summary: Mendapatkan produk berdasarkan harga dan stok minimum
      tags:
      - Product
      description: Endpoint untuk mendapatkan produk dengan filter harga dan stok minimum.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: price
          required: true
          schema:
            type: number
            format: float
          description: Harga maksimum produk
        - in: path
          name: minStock
          required: true
          schema:
            type: integer
          description: Stok minimum produk
      responses:
        '200':
          description: Produk berhasil ditemukan
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ProductID:
                      type: integer
                    Name:
                      type: string
                    Description:
                      type: string
                    Price:
                      type: number
                      format: float
                    Stock:
                      type: integer
        '404':
          description: Produk tidak ditemukan
        '500':
          description: Kesalahan server

  /products/filter:
    post:
      summary: Mendapatkan produk berdasarkan harga dan stok minimum dengan request body
      tags:
      - Product
      description: Endpoint untuk mendapatkan produk dengan filter harga dan stok minimum menggunakan request body.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - price
                - minStock
              properties:
                price:
                  type: number
                  format: float
                minStock:
                  type: integer
      responses:
        '200':
          description: Produk berhasil ditemukan
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ProductID:
                      type: integer
                    Name:
                      type: string
                    Description:
                      type: string
                    Price:
                      type: number
                      format: float
                    Stock:
                      type: integer
        '400':
          description: Harga dan stok minimum diperlukan
        '404':
          description: Produk tidak ditemukan
        '500':
          description: Kesalahan server

#Cart
  /cart:
    get:
      summary: Mendapatkan semua cart
      tags:
      - Cart
      description: Endpoint untuk mendapatkan semua cart beserta cart items dan produk terkait.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Data cart berhasil ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        CartID:
                          type: integer
                        CartItems:
                          type: array
                          items:
                            type: object
                            properties:
                              ProductID:
                                type: integer
                              Quantity:
                                type: integer
                              Product:
                                type: object
                                properties:
                                  ProductID:
                                    type: integer
                                  Name:
                                    type: string
                                  Price:
                                    type: number
                                    format: float
        '500':
          description: Kesalahan server

    post:
      summary: Menambahkan cart baru
      tags:
      - Cart
      description: Endpoint untuk menambahkan cart baru bersama dengan cart items.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ProductID
                - Quantity
              properties:
                ProductID:
                  type: integer
                Quantity:
                  type: integer
      responses:
        '201':
          description: Cart dan cart item berhasil dibuat
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      CartID:
                        type: integer
                      ProductID:
                        type: integer
                      Quantity:
                        type: integer
        '500':
          description: Kesalahan server

  /cart/{id}:
    get:
      summary: Mendapatkan cart berdasarkan ID
      tags:
      - Cart
      description: Endpoint untuk mendapatkan cart berdasarkan CartID dengan cart items dan produk terkait.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID cart yang akan dicari
      responses:
        '200':
          description: Cart berhasil ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        CartID:
                          type: integer
                        CartItems:
                          type: array
                          items:
                            type: object
                            properties:
                              ProductID:
                                type: integer
                              Quantity:
                                type: integer
                              Product:
                                type: object
                                properties:
                                  ProductID:
                                    type: integer
                                  Name:
                                    type: string
                                  Price:
                                    type: number
                                    format: float
        '404':
          description: Cart tidak ditemukan
        '500':
          description: Kesalahan server

    delete:
      summary: Menghapus cart berdasarkan ID
      tags:
      - Cart
      description: Endpoint untuk menghapus cart dan cart items berdasarkan CartID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID cart yang akan dihapus
      responses:
        '200':
          description: Cart dan cart items berhasil dihapus
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: integer
        '404':
          description: Cart tidak ditemukan
        '500':
          description: Kesalahan server

#Cart Item
  /cart-items:
    get:
      summary: Mendapatkan semua cart items
      tags:
      - Cart Item
      description: Endpoint untuk mendapatkan semua cart items yang ada.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Data cart items berhasil ditemukan
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    CartItemID:
                      type: integer
                    CartID:
                      type: integer
                    ProductID:
                      type: integer
                    Quantity:
                      type: integer
        '500':
          description: Kesalahan server

    post:
      summary: Menambahkan cart item baru
      tags:
      - Cart Item
      description: Endpoint untuk menambahkan cart item baru, atau memperbarui quantity jika cart item sudah ada.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - CartID
                - ProductID
                - Quantity
              properties:
                CartID:
                  type: integer
                ProductID:
                  type: integer
                Quantity:
                  type: integer
      responses:
        '201':
          description: Cart item berhasil ditambahkan atau diperbarui
          content:
            application/json:
              schema:
                type: object
                properties:
                  CartItemID:
                    type: integer
                  CartID:
                    type: integer
                  ProductID:
                    type: integer
                  Quantity:
                    type: integer
        '500':
          description: Kesalahan server

  /cart-items/{id}:
    get:
      summary: Mendapatkan cart item berdasarkan ID
      tags:
      - Cart Item
      description: Endpoint untuk mendapatkan cart item berdasarkan CartItemID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID cart item yang akan dicari
      responses:
        '200':
          description: Cart item berhasil ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  CartItemID:
                    type: integer
                  CartID:
                    type: integer
                  ProductID:
                    type: integer
                  Quantity:
                    type: integer
        '404':
          description: Cart item tidak ditemukan
        '500':
          description: Kesalahan server

    put:
      summary: Memperbarui cart item berdasarkan ID
      tags:
      - Cart Item
      description: Endpoint untuk memperbarui cart item berdasarkan CartItemID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID cart item yang akan diperbarui
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CartID:
                  type: integer
                ProductID:
                  type: integer
                Quantity:
                  type: integer
      responses:
        '200':
          description: Cart item berhasil diperbarui
          content:
            application/json:
              schema:
                type: object
                properties:
                  CartItemID:
                    type: integer
                  CartID:
                    type: integer
                  ProductID:
                    type: integer
                  Quantity:
                    type: integer
        '404':
          description: Cart item tidak ditemukan
        '500':
          description: Kesalahan server

    delete:
      summary: Menghapus cart item berdasarkan ID
      tags:
      - Cart Item
      description: Endpoint untuk menghapus cart item berdasarkan CartItemID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID cart item yang akan dihapus
      responses:
        '200':
          description: Cart item berhasil dihapus
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: integer
        '404':
          description: Cart item tidak ditemukan
        '500':
          description: Kesalahan server


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT